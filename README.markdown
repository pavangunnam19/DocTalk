# 📄 DocTalk – PDF Question Answering Application

**DocTalk** is a **Streamlit-based web application** that lets you 🆙 upload a PDF and 💬 ask questions about its content. It extracts text using PyPDF2, generates embeddings with SentenceTransformers, and uses Google’s Gemini API to provide precise, AI-generated answers. The app also displays chat history and offers a clean, user-friendly interface.

---

## ✨ Features

- 📤 **Upload PDF files** and extract text content  
  Supports standard PDFs with extractable text.
- ❓ **Ask questions** about the uploaded PDF  
  Get answers generated by Google’s Gemini AI based on the document’s content.
- 🕰️ **Chat history**  
  View the last 5 question-answer pairs—great for contextual follow-ups.
- 💻 **Responsive UI**  
  Custom CSS styling for a modern, accessible experience.

---

## 🛠️ Requirements

### 💻 Software

- 🐍 **Python**: Version 3.7 or higher (*3.9–3.11 recommended*)
- 🖥️ **Operating System**: Windows, macOS, or Linux
- 🌐 **Internet Connection**: Required for downloading the SentenceTransformer model and making Gemini API calls

### 🖥️ Hardware

- ⚡️ **CPU**: Modern multi-core (e.g., Intel i3/i5/i7, AMD Ryzen)
- 🧠 **RAM**: Minimum 4GB (8GB or more recommended for large PDFs)
- 💾 **Storage**: ~1GB free space (for Python, libraries, and the SentenceTransformer model)

---

## 📦 Python Packages

Install via:

```
pip install streamlit PyPDF2 sentence-transformers scikit-learn numpy langchain-google-genai python-dotenv
```

* **streamlit**: Web interface
* **PyPDF2**: PDF text extraction
* **sentence-transformers**: Generate text embeddings (all-MiniLM-L6-v2 model)
* **scikit-learn**: Similarity search (NearestNeighbors)
* **numpy**: Numerical operations
* **langchain-google-genai**: Google Gemini API integration
* **python-dotenv**: Secure management of API keys (optional, recommended)

---

## 🔑 Google API Key

1. **Obtain** your Google API key for Gemini (`gemini-1.5-flash` or similar) from [Google Cloud Console](https://console.cloud.google.com/)
2. **Replace** the placeholder `YOUR_ACTUAL_GOOGLE_API_KEY_HERE` in your code with your real key
3. **Best Practice**: Use `.env` to keep your key secure:

   ```
   GOOGLE_API_KEY=your-api-key-here
   ```
   Then load it in your app:
   ```
   from dotenv import load_dotenv
   import os
   load_dotenv()
   google_api_key = os.getenv("GOOGLE_API_KEY")
   ```

---

## 🚀 Installation

1. **Clone or download** the **DocTalk** code  
   Save as `app.py` in your project directory.

2. **Set up a virtual environment** (recommended):

   ```
   python -m venv venv
   # Activate:
   # Linux/macOS: source venv/bin/activate
   # Windows: venv\Scripts\activate
   ```

3. **Install dependencies**:

   ```
   pip install streamlit PyPDF2 sentence-transformers scikit-learn numpy langchain-google-genai python-dotenv
   ```

4. **Configure your API key**  
   Replace the placeholder in `app.py` or use a `.env` file.

5. **Run the application**:

   ```
   streamlit run app.py
   ```
   Open [http://localhost:8501](http://localhost:8501) in your browser to access the app.

---

## 🏄 Usage

1. **Upload a PDF**  
   Use the file uploader to select any PDF (text must be extractable; scanned PDFs not supported in this version).
2. **Ask your question**  
   Enter your question in the input field—the app will process the PDF and use Gemini to answer.
3. **View chat history**  
   The last 5 question-answer pairs are displayed for context and follow-up.

---

## 🛟 Troubleshooting

- **PDF extraction fails?**  
  Ensure your PDF contains extractable text (no scanned images). For scanned PDFs, check out **Codex Historica** (see below) which features OCR.
- **API key errors?**  
  Double-check your Google API key and `.env` setup.
- **Missing packages?**  
  Run `pip list` to see installed packages.
- **Slow performance?**  
  Large PDFs take longer to process. For smoother use, try a more powerful machine or optimize chunking logic.
- **Other issues?**  
  Check for write permissions in the app’s directory, especially if using the built-in data storage.

---

## 🏆 V2: Advanced Version – Codex Historica

**DocTalk** is the foundation for **[Codex Historica]**, a professional-grade AI document assistant featuring:

- 🖼️ **Full OCR** for scanned and image-based PDFs
- 🤖 **Local LLM** (Google FLAN-T5) for privacy and performance
- 🖥️ **Custom UI** with FastAPI backend
- 🛡️ **Enterprise-grade security and features**

**Codex Historica** is the next evolution—designed for power users and professional deployments.

---

## 📝 Notes

- The **SentenceTransformer model** (`all-MiniLM-L6-v2`) downloads automatically on first run (~200MB).
- The app creates a `data` directory for temporary files. **Ensure write permissions** in your app directory.
- **For production**, **never hardcode API keys**—use environment variables or Streamlit Secrets.
- **Contribute or suggest improvements**—PRs and ideas are welcome!

---

## 👨‍💻 Author

Developed with ❤️ by **Pavan Gunnam**.

---

*Ready? Upload, ask, and chat with your documents—today!*
```
